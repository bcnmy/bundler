import { PackedUserOperation } from "../PackedUserOperation";
import _ from 'lodash';
import { UserOperationStruct } from "../../types";
import { getUserOpHash, packUserOperation, COMMON_ENTRYPOINT_V7_ADDRESSES, unpackUserOperation} from "../PackedUserOperation";

describe("PackedUserOperation simple test", () => {
    const ENTRYPOINT_V7_ADDRESS = COMMON_ENTRYPOINT_V7_ADDRESSES[0];
    const chainId = 84532n;

    describe("user op convertion 1", () => {
        const sender = "0x1234567890abcdef1234567890abcdef12345678";
        const callData = "0x";
        const correctHash = "0x42bfcf0ecae5b274838cba8bbe6c6012f2259014607d22248b3414337c26f25d";
        const correctAccountGasLimits = "0x0000000000000000000000000007a12000000000000000000000000000017ed0";
        const correctGasFees = "0x000000000000000000000000000f424000000000000000000000000000c8bf5e";
        const userOp: UserOperationStruct = {
            sender,
            nonce: 1n,
            // initCode: "0x",
            callData,
            // paymasterAndData: "0x",
            callGasLimit: 98000n,
            verificationGasLimit: 500000n,
            preVerificationGas: 21000n,
            maxPriorityFeePerGas: 1000000n,
            maxFeePerGas: 13156190n,
            signature: "0x",
        };

        it("user op with simple fields", async () => {
            const packedUserOp = packUserOperation(userOp);
            expect(packedUserOp.sender).toEqual(sender);
            expect(packedUserOp.accountGasLimits).toEqual(correctAccountGasLimits);
            expect(packedUserOp.gasFees).toEqual(correctGasFees);
            expect(packedUserOp.callData).toEqual(callData);

            expect(getUserOpHash(packedUserOp, ENTRYPOINT_V7_ADDRESS, chainId)).toEqual(correctHash);
        });

        it("unpacked is the same as original user op", async () => {
            const packedUserOp = packUserOperation(userOp);

            const unpackedUserOp = unpackUserOperation(packedUserOp);

            expect(packedUserOp.sender).toEqual(sender);
            expect(packedUserOp.accountGasLimits).toEqual(correctAccountGasLimits);
            expect(packedUserOp.gasFees).toEqual(correctGasFees);
            expect(packedUserOp.callData).toEqual(callData);

            expect(_.isEqual(unpackedUserOp, userOp)).toBeTruthy();
        });

        it("fail user op with simple fields", async () => {
            userOp.verificationGasLimit = 0n;
            
            const packedUserOp = packUserOperation(userOp);
            expect(packedUserOp.sender).toEqual(sender);
            expect(packedUserOp.accountGasLimits !== correctAccountGasLimits).toBeTruthy();
            expect(getUserOpHash(packedUserOp, ENTRYPOINT_V7_ADDRESS, chainId) !== correctHash).toBeTruthy();
            });
    });
});

describe("Real world example", () => {
    const ENTRYPOINT_V7_ADDRESS = COMMON_ENTRYPOINT_V7_ADDRESSES[0];
    const chainId = 84532n;
    
    // https://sepolia.basescan.org/tx/0x49cc4128c297d1e2a4a1e3892f5b84a99092a46fbfac96fb0294269ea10b95b4
    describe("correct real world packed user op", () => {
        const correctHash = "0xec5d98b7b476f62ed958f6622f9424c3c7afbfb7df2f640b02f81341149b0828";
        const packedUserOp: PackedUserOperation = {
            sender : "0x745B9Fe41556A7e008CF1cD0adF36deE70C7B272", 
            nonce: 456025572262225600221800371845431683190880916353967002629830005410307768320n,
            initCode: "0xd703aae79538628d27099b8c4f621be4ccd142d5c5265d5d000000000000000000000000aac5d4240af87249b3f71bc8e4a2cae074a3e4190000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001243c3b752b015c97aa67ba578e3c54ec5942a7563ea9130e4f5f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000145e9b5f95975d4b1ba30b4f2f681e7b9f79744c240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 
            callData : "0xe9ae5c5301000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000080f3b8c46381d5cf4b737742d5fe323b7caa43b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000064a23f2985000000000000000000000000b4aa062cc685e7e2b6881ed57fb830cd7d4bcf25000000000000000000000000b4aa062cc685e7e2b6881ed57fb830cd7d4bcf25000000000000000000000000000000000000000000000000000000006709462300000000000000000000000000000000000000000000000000000000", "accountGasLimits": "0x000000000000000000000000000bd1590000000000000000000000000002bc6b", 
            preVerificationGas: 67461260n,
            gasFees: "0x000000000000000000000000000f424000000000000000000000000000a2621d",
            paymasterAndData: "0x9d0021a869f1ed3a661ffe8c9b41ec6244261d9800000000000000000000000000005002000000000000000000000000000000010000000000000000000000000000000000000000000000000000000066ba2e7e0000000000000000000000000000000000000000000000000000000000000000a7cb1023c8623b6681c8ec5ade2b84ddf3dd3be57ddf2ed110d66dd678b44e7f70de48cb261dbacf9f64d4a107978141063046245605e3deb6456ee9a620f6a91b", 
            signature: "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001eb436cad8a6d025df6c82c5bb43fbf11fc5b9b700000000000000000000000000000000000000000000000000000000000000000000000000000000002a00006a6f069e2a08c2468e7724ab3250cdbfba14d4ffd76f56d3b6deabcf5c008c7f7484fb936bb1b24600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ece9ae5c5300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000001ff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c1dd0953a8032819ea88738b6db941ef18d8bf301cdc4319de4666fb9d309a33ec4c174b6a8efe3c1e70a3061e244f9f04795f05d11a527c3ea23f14a8d10848b11c9597c7a0bdb4d2e853ea0db626027f325bc211a288eb3d18806f76281cf910d200000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001b0091d0d18984646971ebd26d9faafd9224cf5e080268fc114917513cde6135e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000042ffd178e56e0ac6e8bd77f97234796f7af3cab853f183826b1a673b8253af5c803c229ede6a3af9120daa721dad1b593b88ff3d13a0626b6a57c6cecdb44d64019a1b000000000000000000000000000000000000000000000000000000000000"
        };

        it("user op with simple fields", async () => {
            const userOp = unpackUserOperation(packedUserOp);
            expect(userOp.sender).toEqual("0x745B9Fe41556A7e008CF1cD0adF36deE70C7B272");
            expect(userOp.maxPriorityFeePerGas).toEqual(1000000n); // f4240 from gasFees
            expect(getUserOpHash(packedUserOp, ENTRYPOINT_V7_ADDRESS, chainId)).toEqual(correctHash);
        });

    });

});

Release "bundler-80001" does not exist. Installing it now.
NAME: bundler-80001
LAST DEPLOYED: Tue Oct 24 18:18:41 2023
NAMESPACE: tw-prod
STATUS: pending-install
REVISION: 1
TEST SUITE: None
USER-SUPPLIED VALUES:
CHAIN_ID: 80001
affinity_tolerations:
  enable: false
datadog:
  enable: false
env: prod
fundingBalanceThreshold: "0.1"
fundingRelayerAmount: "0.2"
gcpSecretManagerName: ""
gcpSecretName: tw-prod-80001-CONFIG-PASSPHRASE
hpa:
  average_cpu_hpa: 500m
  average_http_requests_hpa: 10
  maxReplicas: 20
  minReplicas: 1
image:
  name: us-docker.pkg.dev/prj-biconomy-prod-001/bundler/bundler
  tag: 0.3-amd64
maxRelayerCount: "5"
minRelayerCount: "3"
nameOverride: chain-80001
namespace: tw-prod
port: "3000"
projectId: prj-biconomy-prod-001
prometheus:
  enabled: true
provider: cloud
replicaCount: 1
resource:
  limits:
    cpu: 500m
    memory: 1Gi
  requests:
    cpu: 200m
    memory: 512Mi
secret:
  config:
    name: config.json.enc
  key: bundlers
  passphrase:
    key: passphrase
    name: CONFIG_PASSPHRASE
    value: ""
    version: latest
  projectID: biconomy-test
targetPort: "3000"

COMPUTED VALUES:
CHAIN_ID: 80001
affinity_tolerations:
  enable: false
datadog:
  enable: false
env: prod
fundingBalanceThreshold: "0.1"
fundingRelayerAmount: "0.2"
gcpSecretManagerName: ""
gcpSecretName: tw-prod-80001-CONFIG-PASSPHRASE
hpa:
  average_cpu_hpa: 500m
  average_http_requests_hpa: 10
  maxReplicas: 20
  minReplicas: 1
image:
  name: us-docker.pkg.dev/prj-biconomy-prod-001/bundler/bundler
  tag: 0.3-amd64
maxRelayerCount: "5"
minRelayerCount: "3"
nameOverride: chain-80001
namespace: tw-prod
port: "3000"
projectId: prj-biconomy-prod-001
prometheus:
  enabled: true
provider: cloud
replicaCount: 1
resource:
  limits:
    cpu: 500m
    memory: 1Gi
  requests:
    cpu: 200m
    memory: 512Mi
secret:
  config:
    name: config.json.enc
  key: bundlers
  passphrase:
    key: passphrase
    name: CONFIG_PASSPHRASE
    value: ""
    version: latest
  projectID: biconomy-test
targetPort: "3000"

HOOKS:
MANIFEST:
---
# Source: bundler/templates/encrptedConfigConfigmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chain-80001-configmap
  namespace: tw-prod
  labels:
  
    helm.sh/chart: chain-80001
    app.kubernetes.io/name: chain-80001
    app.kubernetes.io/instance: bundler-80001
    app: chain-80001
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm

data:
  config.json.enc : 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
---
# Source: bundler/templates/envConfigMap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  
  name: chain-80001-env-configmap
  namespace: tw-prod
  labels:
  
    helm.sh/chart: chain-80001
    app.kubernetes.io/name: chain-80001
    app.kubernetes.io/instance: bundler-80001
    app: chain-80001
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
data:
  MIN_RELAYER_COUNT:  "3"
  MAX_RELAYER_COUNT: "5"
  FUNDING_BALANCE_THRESHOLD: "0.1"
  FUNDING_RELAYER_AMOUNT: "0.2"
---
# Source: bundler/templates/service.yaml
apiVersion: v1
kind: Service
metadata:

  name: chain-80001-service
  namespace: tw-prod
  labels:
  
    helm.sh/chart: chain-80001
    app.kubernetes.io/name: chain-80001
    app.kubernetes.io/instance: bundler-80001
    app: chain-80001
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    cloud.google.com/neg: '{"ingress": true}'
spec:
  selector:
  
    app.kubernetes.io/name: chain-80001
    app.kubernetes.io/instance: bundler-80001
    app: chain-80001
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
---
# Source: bundler/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  # name: sample-app

  name: chain-80001-hpa
  namespace: tw-prod
  chainId: 80001
  labels:
  
    helm.sh/chart: chain-80001
    app.kubernetes.io/name: chain-80001
    app.kubernetes.io/instance: bundler-80001
    app: chain-80001
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm

spec:
  scaleTargetRef:
    # point the HPA at the sample application
    # you created above
    apiVersion: apps/v1
    kind: StatefulSet
    name: chain-80001-statefulset

  # autoscale between 1 and 10 replicas
  minReplicas:  1
  maxReplicas:  20
  metrics:
  # use a "Pods" metric, which takes the average of the
  # given metric across all pods controlled by the autoscaling target
  - type: Pods
    pods:
      # use the metric that you used above: pods/http_requests
      metric:
        name: 80001-http-requests
      # target 500 milli-requests per second,
      # which is 1 request every two seconds
      # http_requests_per_two_minute metric goes beyond 100, 
      # then you should set the averageValue for that metric 
      # to 100 (or 100000m, as 1 = 1000m).
      target:
        type: AverageValue
        averageValue: 10
  
  - type: Pods
    pods:
      metric:
        name: 80001-cpu-usage
      target:
        type: AverageValue
        averageValue: 500m # Adjust the averageValue as per your requirements.
---
# Source: bundler/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
    
  name: chain-80001-statefulset
  namespace: tw-prod
  
  labels:
  
    helm.sh/chart: chain-80001
    app.kubernetes.io/name: chain-80001
    app.kubernetes.io/instance: bundler-80001
    app: chain-80001
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm

spec:
  serviceName: chain-80001-service
  
  replicas: 1

  selector:
    matchLabels:
    
      app.kubernetes.io/name: chain-80001
      app.kubernetes.io/instance: bundler-80001
      app: chain-80001
  template:
    metadata:
      labels:
        
        app.kubernetes.io/name: chain-80001
        app.kubernetes.io/instance: bundler-80001
        app: chain-80001
        namespace: tw-prod

      annotations:
        
        
        releaseTime: "2023-10-24 12:48:41Z"
        prometheus.io/scrape: "true"
        prometheus.io/path: /metrics
        prometheus.io/port: "3000"

    spec:
      serviceAccountName: tw-prod-service-account

      initContainers:

      - name: secrets-init
        image: doitintl/secrets-init:0.3.6
        command:
        - sh
        args:
          - -c
          - "cp /usr/local/bin/secrets-init /secrets-init/bin/"
        volumeMounts:
        - mountPath: /secrets-init/bin
          name: secrets-init-volume

      - name: init-ordinal
        image: busybox:1.28
        command:
        - "sh"
        - "-c"
        - >
          echo $(echo $POD_NAME | awk -F '-' '{print $NF}') > /etc/podinfo/ordinal_index;
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        volumeMounts:
        - name: podinfo
          mountPath: /etc/podinfo
      containers:
      - name: chain-80001-pod
        imagePullPolicy:  "IfNotPresent" 
        image: us-docker.pkg.dev/prj-biconomy-prod-001/bundler/bundler:0.3-amd64
        ports:
        - containerPort: 3000

        command:
              - "/secrets-init/bin/secrets-init"
        args:
            - "--provider=google"
            - "/entrypoint.sh"

        env:
          - name: CHAIN_ID
            value: "80001"
          - name: CONFIG_PASSPHRASE
            value: gcp:secretmanager:projects/prj-biconomy-prod-001/secrets/tw-prod-80001-CONFIG-PASSPHRASE


        envFrom:
          - configMapRef:
              name: chain-80001-env-configmap

        volumeMounts:
          - mountPath: "/relayer-node/config.json.enc"
            name: config-volume
            subPath: "config.json.enc"

          - mountPath: /secrets-init/bin
            name: secrets-init-volume

          - name: podinfo
            mountPath: /etc/podinfo
        resources:
          requests:
            memory: 512Mi
            cpu: 200m
          limits:
            memory: 1Gi
            cpu: 500m
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
          failureThreshold: 3

      volumes:
      - name: config-volume
        configMap:
          name: chain-80001-configmap

      - name: env-config-volume
        configMap:
          name: chain-80001-env-configmap

      - name: podinfo
        emptyDir: {}

      - name: secrets-init-volume
        emptyDir: { }

